align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='vclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
formattable(chi_viol_table,
title='chi violent',
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='vclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
formattable(mke_viol_table,
title = 'mke violent',
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='vclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
mke_viol <-formattable(mke_viol_table,
title = 'mke violent',
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='vclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
mke_prop <- formattable(mke_prop_table,
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='pclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
formattable(mke_prop, mke_viol)
formattable(mke_viol_table,
title = 'mke violent',
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='vclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
formattable(mke_prop_table,
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='pclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
formattable(mke_viol_table,
title = 'mke violent',
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='vclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
library(randomForest)
library(dplyr)
library(data.table)
library(formattable)
library(tidyr)
rm(list=ls())
chi_data <- read.delim("/Users/Joey/Desktop/Snowden/Data/CHI Factors Update_for Shion and Joe_corrected.csv")
chi_data$D_R <- NULL
populationDensity_chi <- numeric()
for( x in 1:nrow(chi_data) ){
popDensity <- chi_data$Total_Pop[x] / chi_data$SqMi[x]
populationDensity_chi[x] <- popDensity
}
# CHI without latent factor stuff
#
chi_prop_wVars <- chi_data[14:26]
chi_prop_wVars$Property <- chi_data$Property
chi_prop_wVars$pclag <- chi_data$pclag
chi_prop_wVars$PopDensity <- populationDensity_chi
chi_viol_wVars <- chi_data[14:26]
chi_viol_wVars$Violent <- chi_data$Violent
chi_viol_wVars$vclag <- chi_data$vclag
chi_viol_wVars$PopDensity <- populationDensity_chi
# latent factor stuff - building the dataframe
#
disadvantage_chi_fl <- c(0.8, 0.8, 0.7, 0.7, -0.7, 0.7)
affluence_chi_fl <- c(0.8, 0.7)
immigration_chi_fl <- c(0.8, 0.8)
resStability_chi_fl <- c(0.8, 0.7)
disadvantage_chi <- rowMeans(chi_data %>% dplyr::select(BelowProp, MandFHH_ch, SSIProp, Unemployed_Fixed, Inc75K_, PAIProp) * disadvantage_chi_fl)
affluence_chi <- rowMeans(chi_data %>% dplyr::select(BAup, OccuProp) * affluence_chi_fl)
immigration_chi <- rowMeans(chi_data %>% dplyr::select(ForeignPro, HispProp) * immigration_chi_fl)
resStability_chi <- rowMeans(chi_data %>% dplyr::select(OwnerProp, SameProp) * resStability_chi_fl)
chi_prop_modelFrame <- data.frame(chi_data$Property, chi_data$pclag, disadvantage_chi, immigration_chi,
resStability_chi, affluence_chi, populationDensity_chi, chi_data$EthnHerter)
colnames(chi_prop_modelFrame) <- c('Property','pclag','Disadvantage','Immigration','ResStability','Affluence','PopDensity','EthnHerter')
chi_viol_modelFrame <- data.frame(chi_data$Violent, chi_data$vclag, disadvantage_chi, immigration_chi,
resStability_chi, affluence_chi, populationDensity_chi, chi_data$EthnHerter)
colnames(chi_viol_modelFrame) <- c('Violent','vclag','Disadvantage','Immigration','ResStability','Affluence','PopDensity','EthnHerter')
#
# CHI Property RandomForest begin
#
# random forest with latent factors
#
# split into train and validation sets; training set : validation set = 70 : 30 (random)
set.seed(100)
chi_prop_wLF_sample <- sample(nrow(chi_prop_modelFrame), 0.7*nrow(chi_prop_modelFrame), replace=FALSE)
chi_prop_wLF_trainSet <- chi_prop_modelFrame[chi_prop_wLF_sample,]
chi_prop_wLF_validSet <- chi_prop_modelFrame[-chi_prop_wLF_sample,]
# create random forest model with default parameters
chi_prop_forest_wLF <- randomForest(Property ~ ., data = chi_prop_wLF_trainSet, importance=TRUE)
#chi_prop_forest_wLF <- randomForest(Property ~ ., data=chi_prop_modelFrame, importance=True)
# random forest with variables (without binning into latent factors)
#
chi_prop_wVars_sample <- sample(nrow(chi_prop_wVars), 0.7*nrow(chi_prop_wVars), replace=FALSE)
chi_prop_wVars_trainSet <- chi_prop_wVars[chi_prop_wVars_sample,]
chi_prop_wVars_validSet <- chi_prop_wVars[-chi_prop_wVars_sample,]
chi_prop_forest_wVars <- randomForest(Property ~ ., data=chi_prop_wVars_trainSet, importance=TRUE)
#chi_prop_forest_wVars <- randomForest(Property ~., data=chi_prop_wVars, importance=True)
# CHI Violent
#
# random forest with latent factors
#
chi_viol_wLF_sample <- sample(nrow(chi_viol_modelFrame), 0.7*nrow(chi_viol_modelFrame), replace=FALSE)
chi_viol_wLF_trainSet <- chi_viol_modelFrame[chi_viol_wLF_sample,]
chi_viol_wLF_validSet <- chi_viol_modelFrame[-chi_viol_wLF_sample,]
chi_viol_forest_wLF <- randomForest(Violent ~ ., data=chi_viol_wLF_trainSet, importance=TRUE)
#chi_viol_forest_wLF <- randomForest(Violent ~ ., data=chi_viol_modelFrame, importance=TRUE)
# random forest with variables (without binning into latent factors)
#
chi_viol_wVars_sample <- sample(nrow(chi_viol_wVars), 0.7*nrow(chi_viol_wVars), replace=FALSE)
chi_viol_wVars_trainSet <- chi_viol_wVars[chi_viol_wVars_sample,]
chi_viol_wVars_validSet <- chi_viol_wVars[-chi_viol_wVars_sample,]
chi_viol_forest_wVars <- randomForest(Violent ~ ., data=chi_viol_wVars_trainSet, importance=TRUE)
#chi_viol_forest_wVars <- randomForest(Violent ~ ., data=chi_viol_wVars, importance=TRUE)
# creates table visualizations
#
#
# PROPERTY CHART
#
# initializes columns for MSEs later used in the charts
#
chi_prop_wLF_z <- c(rep(0, 15))
chi_prop_wVars_z <- c(rep(0, 7))
chi_prop_wLF <- importance(chi_prop_forest_wLF)[1:7]
chi_prop_wVars <- importance(chi_prop_forest_wVars)[1:15]
for (v in chi_prop_wLF_z){
chi_prop_wLF <- c(chi_prop_wLF, v)
}
for (v in chi_prop_wVars){
chi_prop_wVars_z <- c(chi_prop_wVars_z, v)
}
chi_prop_wVars <- chi_prop_wVars_z
# create the tables
#
chi_prop_table <- data.table('Variables'=c('pclag','Disadvantage','Immigration','ResStability','Affluence','PopDensity','EthnHerter',
'PAIProp','OccuProp','OwnerProp','Inc75K_','MandFHH_ch','Unemployed','ForeignPro','HispProp',
'SSIProp','BelowProp','BAup','EthnHerter','SameProp','pclag','PopDensity'),
'IncMSE1' = chi_prop_wLF,
'IncMSE2' = chi_prop_wVars)
fix1 <- aggregate(IncMSE1 ~ Variables, data=chi_prop_table, FUN=sum)
fix2 <- aggregate(IncMSE2 ~ Variables, data=chi_prop_table, FUN=sum)
fix1$IncMSE2 <- fix2$IncMSE2
chi_prop_table <- fix1
chi_prop_table <- chi_prop_table %>% arrange(match(Variables, c('pclag','EthnHerter','PopDensity',
'Disadvantage','Immigration','ResStability','Affluence',
'PAIProp','OccuProp','OwnerProp','Inc75K_','MandFHH_ch','Unemployed','ForeignPro','HispProp',
'SSIProp','BelowProp','BAup','SameProp')))
# rounds off the decimals at 3 decimal places to make the table easier to read & removes 0.000 to clean up table
#
for (i in 1:length(chi_prop_table$IncMSE1)){
chi_prop_table$IncMSE1[i] <- format(round(as.double(chi_prop_table$IncMSE1[i]), 3), nsmall=3)
chi_prop_table$IncMSE2[i] <- format(round(as.double(chi_prop_table$IncMSE2[i]), 3), nsmall=3)
if (chi_prop_table$IncMSE1[i] == 0.000){
chi_prop_table$IncMSE1[i] <- ''
}
if (chi_prop_table$IncMSE2[i] == 0.000){
chi_prop_table$IncMSE2[i] <- ''
}
}
# "if the variable name is pclag, color it red. if variable is pop density, color it green. if variable is ethnherter, color it blue"
#
setnames(chi_prop_table, c('Variables','%IncMSE1','%IncMSE2'))
formattable(chi_prop_table,
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='pclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
# VIOLENT CHART
#
# initializes columns for MSEs later used in the charts
#
chi_viol_wLF_z <- c(rep(0, 15))
chi_viol_wVars_z <- c(rep(0, 7))
chi_viol_wLF <- importance(chi_viol_forest_wLF)[1:7]
chi_viol_wVars <- importance(chi_viol_forest_wVars)[1:15]
for (v in chi_viol_wLF_z){
chi_viol_wLF <- c(chi_viol_wLF, v)
}
for (v in chi_viol_wVars){
chi_viol_wVars_z <- c(chi_viol_wVars_z, v)
}
chi_viol_wVars <- chi_viol_wVars_z
# create the tables
#
chi_viol_table <- data.table('Variables'=c('vclag','Disadvantage','Immigration','ResStability','Affluence','PopDensity','EthnHerter',
'PAIProp','OccuProp','OwnerProp','Inc75K_','MandFHH_ch','Unemployed','ForeignPro','HispProp',
'SSIProp','BelowProp','BAup','EthnHerter','SameProp','vclag','PopDensity'),
'IncMSE1' = chi_viol_wLF,
'IncMSE2' = chi_viol_wVars)
fix1 <- aggregate(IncMSE1 ~ Variables, data=chi_viol_table, FUN=sum)
fix2 <- aggregate(IncMSE2 ~ Variables, data=chi_viol_table, FUN=sum)
fix1$IncMSE2 <- fix2$IncMSE2
chi_viol_table <- fix1
chi_viol_table <- chi_viol_table %>% arrange(match(Variables, c('vclag','EthnHerter','PopDensity',
'Disadvantage','Immigration','ResStability','Affluence',
'PAIProp','OccuProp','OwnerProp','Inc75K_','MandFHH_ch','Unemployed','ForeignPro','HispProp',
'SSIProp','BelowProp','BAup','SameProp')))
# rounds off the decimals at 3 decimal places to make the table easier to read & removes 0.000 to clean up the table
#
for (i in 1:length(chi_viol_table$IncMSE1)){
chi_viol_table$IncMSE1[i] <- format(round(as.double(chi_viol_table$IncMSE1[i]), 3), nsmall=3)
chi_viol_table$IncMSE2[i] <- format(round(as.double(chi_viol_table$IncMSE2[i]), 3), nsmall=3)
if (chi_viol_table$IncMSE1[i] == 0.000){
chi_viol_table$IncMSE1[i] <- ''
}
if (chi_viol_table$IncMSE2[i] == 0.000){
chi_viol_table$IncMSE2[i] <- ''
}
}
# "if the variable name is vclag, color it red. if variable is pop density, color it green. if variable is ethnherter, color it blue"
#
setnames(chi_viol_table, c('Variables','%IncMSE1','%IncMSE2'))
formattable(chi_viol_table,
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='vclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
formattable(chi_prop_table,
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='pclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
formattable(chi_viol_table,
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='vclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
library(randomForest)
library(dplyr)
library(data.table)
library(formattable)
library(tidyr)
rm(list=ls())
mke_data <- read.csv("/Users/Joey/Desktop/Snowden/Data/MKE Factors Update_for Shion and Joe_corrected.csv")
# Removing first NA column so full dataset operations dont fail
mke_data$D_R <- NULL
populationDensity_mke <- numeric()
for( x in 1:nrow(mke_data) ){
if (mke_data$SqMi[x] == 0.0){
populationDensity_mke[x] <- 0
}else{
popDensity <- mke_data$Total_Pop[x] / mke_data$SqMi[x]
populationDensity_mke[x] <- popDensity
}
}
# MKE without latent factor stuff
#
mke_prop_wVars <- mke_data[14:26]
mke_prop_wVars$Property <- mke_data$Property
mke_prop_wVars$pclag <- mke_data$pclag
mke_prop_wVars$PopDensity <- populationDensity_mke
mke_viol_wVars <- mke_data[14:26]
mke_viol_wVars$Violent <- mke_data$Violent
mke_viol_wVars$vclag <- mke_data$vclag
mke_viol_wVars$PopDensity <- populationDensity_mke
# latent factor stuff - building the dataframe
#
disadvantage_mke_fl <- c(0.8, 0.8, 0.8, 0.7, -0.7, 0.7, -0.6)
immigration_mke_fl <- c(1, 0.9)
resStability_mke_fl <- c(0.9, 0.8)
affluence_mke_fl <- c(0.6)
disadvantage_mke <- rowMeans(mke_data %>% dplyr::select(BelowProp, MandFHH_ch, SSIProp, Unemployment_fixed, Inc75K_,
PAIProp, BAup) * disadvantage_mke_fl)
immigration_mke <- rowMeans(mke_data %>% dplyr::select(HispProp, ForeignPro) * immigration_mke_fl)
resStability_mke <- rowMeans(mke_data %>% dplyr::select(OwnerProp, SameProp) * resStability_mke_fl)
affluence_mke <- rowMeans(mke_data %>% dplyr::select(OccuProp) * affluence_mke_fl)
mke_prop_modelFrame <- data.frame(mke_data$Property, mke_data$pclag, disadvantage_mke, immigration_mke,
resStability_mke, affluence_mke, populationDensity_mke, mke_data$EthnHerter)
colnames(mke_prop_modelFrame) <- c('Property','pclag','Disadvantage','Immigration','ResStability','Affluence','PopDensity','EthnHerter')
mke_viol_modelFrame <- data.frame(mke_data$Violent, mke_data$vclag, disadvantage_mke, immigration_mke,
resStability_mke, affluence_mke, populationDensity_mke, mke_data$EthnHerter)
colnames(mke_viol_modelFrame) <- c('Violent','vclag','Disadvantage','Immigration','ResStability','Affluence','PopDensity','EthnHerter')
#
# MKE Property RandomForest begin
#
# random forest with latent factors
#
# split into train and validation sets; training set : validation set = 70 : 30 (random)
set.seed(100)
mke_prop_wLF_sample <- sample(nrow(mke_prop_modelFrame), 0.7*nrow(mke_prop_modelFrame), replace=FALSE)
mke_prop_wLF_trainSet <- mke_prop_modelFrame[mke_prop_wLF_sample,]
mke_prop_wLF_validSet <- mke_prop_modelFrame[-mke_prop_wLF_sample,]
# create random forest model with default parameters
mke_prop_forest_wLF <- randomForest(Property ~ ., data = mke_prop_wLF_trainSet, importance=TRUE)
#mke_prop_forest_wLF <- randomForest(Property ~ ., data=mke_prop_modelFrame, importance=TRUE)
# random forest with variables (without binning into latent factors)
#
mke_prop_wVars_sample <- sample(nrow(mke_prop_wVars), 0.7*nrow(mke_prop_wVars), replace=FALSE)
mke_prop_wVars_trainSet <- mke_prop_wVars[mke_prop_wVars_sample,]
mke_prop_wVars_validSet <- mke_prop_wVars[-mke_prop_wVars_sample,]
mke_prop_forest_wVars <- randomForest(Property ~ ., data=mke_prop_wVars_trainSet, importance=TRUE)
#mke_prop_forest_wVars <- randomForest(Property ~ ., data=mke_prop_wVars, importance=TRUE)
# MKE Violent
#
# random forest with latent factors
#
mke_viol_wLF_sample <- sample(nrow(mke_viol_modelFrame), 0.7*nrow(mke_viol_modelFrame), replace=FALSE)
mke_viol_wLF_trainSet <- mke_viol_modelFrame[mke_viol_wLF_sample,]
mke_viol_wLF_validSet <- mke_viol_modelFrame[-mke_viol_wLF_sample,]
mke_viol_forest_wLF <- randomForest(Violent ~ ., data=mke_viol_wLF_trainSet, importance=TRUE)
#mke_viol_forest_wLF <- randomForest(Violent ~ ., data=mke_viol_modelFrame, importance=TRUE)
# random forest with variables (without binning into latent factors)
#
mke_viol_wVars_sample <- sample(nrow(mke_viol_wVars), 0.7*nrow(mke_viol_wVars), replace=FALSE)
mke_viol_wVars_trainSet <- mke_viol_wVars[mke_viol_wVars_sample,]
mke_viol_wVars_validSet <- mke_viol_wVars[-mke_viol_wVars_sample,]
mke_viol_forest_wVars <- randomForest(Violent ~ ., data=mke_viol_wVars_trainSet, importance=TRUE)
#mke_viol_forest_wVars <- randomForest(Violent ~., data=mke_viol_wVars, importance=TRUE)
#
# building table for easier view
#
importance(mke_prop_forest_wLF)
importance(mke_prop_forest_wVars)
importance(mke_viol_forest_wLF)
importance(mke_viol_forest_wVars)
# the higher the MSE, the more important the variable is
# IncNodePurity = total decrease in node impurities from splitting on the variable, averaged over all trees
# creates table visualizations
#
#
# PROPERTY CHART
#
# initializes columns for MSEs later used in the charts
#
mke_prop_wLF_z <- c(rep(0, 15))
mke_prop_wVars_z <- c(rep(0, 7))
mke_prop_wLF <- importance(mke_prop_forest_wLF)[1:7]
mke_prop_wVars <- importance(mke_prop_forest_wVars)[1:15]
for (v in mke_prop_wLF_z){
mke_prop_wLF <- c(mke_prop_wLF, v)
}
for (v in mke_prop_wVars){
mke_prop_wVars_z <- c(mke_prop_wVars_z, v)
}
mke_prop_wVars <- mke_prop_wVars_z
# create the tables
#
mke_prop_table <- data.table('Variables'=c('pclag','Disadvantage','Immigration','ResStability','Affluence','PopDensity','EthnHerter',
'PAIProp','OccuProp','OwnerProp','Inc75K_','MandFHH_ch','Unemployed','ForeignPro','HispProp',
'SSIProp','BelowProp','BAup','EthnHerter','SameProp','pclag','PopDensity'),
'IncMSE1' = mke_prop_wLF,
'IncMSE2' = mke_prop_wVars)
fix1 <- aggregate(IncMSE1 ~ Variables, data=mke_prop_table, FUN=sum)
fix2 <- aggregate(IncMSE2 ~ Variables, data=mke_prop_table, FUN=sum)
fix1$IncMSE2 <- fix2$IncMSE2
mke_prop_table <- fix1
mke_prop_table <- mke_prop_table %>% arrange(match(Variables, c('pclag','EthnHerter','PopDensity',
'Disadvantage','Immigration','ResStability','Affluence',
'PAIProp','OccuProp','OwnerProp','Inc75K_','MandFHH_ch','Unemployed','ForeignPro','HispProp',
'SSIProp','BelowProp','BAup','SameProp')))
# rounds off the decimals at 3 decimal places to make the table easier to read & removes 0.000 to clean up table
#
for (i in 1:length(mke_prop_table$IncMSE1)){
mke_prop_table$IncMSE1[i] <- format(round(as.double(mke_prop_table$IncMSE1[i]), 3), nsmall=3)
mke_prop_table$IncMSE2[i] <- format(round(as.double(mke_prop_table$IncMSE2[i]), 3), nsmall=3)
if (mke_prop_table$IncMSE1[i] == 0.000){
mke_prop_table$IncMSE1[i] <- ' '
}
else if (mke_prop_table$IncMSE2[i] == 0.000){
mke_prop_table$IncMSE2[i] <- ' '
}
}
# "if the variable name is pclag, color it red. if variable is pop density, color it green. if variable is ethnherter, color it blue"
#
setnames(mke_prop_table, c('Variables','%IncMSE1','%IncMSE2'))
formattable(mke_prop_table,
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='pclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
# VIOLENT CHART
#
# initializes columns for MSEs later used in the charts
#
mke_viol_wLF_z <- c(rep(0, 15))
mke_viol_wVars_z <- c(rep(0, 7))
mke_viol_wLF <- importance(mke_viol_forest_wLF)[1:7]
mke_viol_wVars <- importance(mke_viol_forest_wVars)[1:15]
for (v in mke_viol_wLF_z){
mke_viol_wLF <- c(mke_viol_wLF, v)
}
for (v in mke_viol_wVars){
mke_viol_wVars_z <- c(mke_viol_wVars_z, v)
}
mke_viol_wVars <- mke_viol_wVars_z
# create the tables
#
mke_viol_table <- data.table('Variables'=c('vclag','Disadvantage','Immigration','ResStability','Affluence','PopDensity','EthnHerter',
'PAIProp','OccuProp','OwnerProp','Inc75K_','MandFHH_ch','Unemployed','ForeignPro','HispProp',
'SSIProp','BelowProp','BAup','EthnHerter','SameProp','vclag','PopDensity'),
'IncMSE1' = mke_viol_wLF,
'IncMSE2' = mke_viol_wVars)
fix1 <- aggregate(IncMSE1 ~ Variables, data=mke_viol_table, FUN=sum)
fix2 <- aggregate(IncMSE2 ~ Variables, data=mke_viol_table, FUN=sum)
fix1$IncMSE2 <- fix2$IncMSE2
mke_viol_table <- fix1
mke_viol_table <- mke_viol_table %>% arrange(match(Variables, c('vclag','EthnHerter','PopDensity',
'Disadvantage','Immigration','ResStability','Affluence',
'PAIProp','OccuProp','OwnerProp','Inc75K_','MandFHH_ch','Unemployed','ForeignPro','HispProp',
'SSIProp','BelowProp','BAup','SameProp')))
# rounds off the decimals at 3 decimal places to make the table easier to read & removes 0.000 to clean up table
#
for (i in 1:length(mke_viol_table$IncMSE1)){
mke_viol_table$IncMSE1[i] <- format(round(as.double(mke_viol_table$IncMSE1[i]), 3), nsmall=3)
mke_viol_table$IncMSE2[i] <- format(round(as.double(mke_viol_table$IncMSE2[i]), 3), nsmall=3)
if (mke_viol_table$IncMSE1[i] == 0.000){
mke_viol_table$IncMSE1[i] = ''
}
if (mke_viol_table$IncMSE2[i] == 0.000){
mke_viol_table$IncMSE2[i] = ''
}
}
# "if the variable name is vclag, color it red. if variable is pop density, color it green. if variable is ethnherter, color it blue"
#
setnames(mke_viol_table, c('Variables','%IncMSE1','%IncMSE2'))
formattable(mke_viol_table,
title = 'mke violent',
align = c('l'),
list('Variables' = formatter("span",style = x ~ style(color = ifelse(x=='vclag', 'red',ifelse(x=='PopDensity', 'green',ifelse(x=='EthnHerter', 'blue', 'black'))))),
'%IncMSE1' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black'))),
'%IncMSE2' = formatter("span",style = x ~ style(color = ifelse(x=='0.000', 'white','black')))))
importance(mke_prop_forest_wLF)
importance(mke_prop_forest_wVars)
mke_prop_forest_wLF$forest
mke_prop_forest_wLF$coefs
coefs(mke_prop_forest_wLF)
coeffficients(mke_prop_forest_wLF)
mke_prop_forest_wLF
library(reshape2)
library(tidyverse)
library(psych)
library(GPArotation)
library(corrplot)
library(nFactors)
library(dplyr)
library(nnet)
library(MASS)
# cleans global library
rm(list=ls())
metadata <- read.csv("/Users/Joey/Desktop/Snowden/Data/CHI_MKE_Metadata.csv")
# found wrong values in original CHI dataset. This next line contains the corrected CHI dataset
#
chi_data_new <- read.delim("/Users/Joey/Desktop/Snowden/Data/CHI Factors Update_for Shion and Joe_corrected.csv")
mke_data_new <- read.csv("/Users/Joey/Desktop/Snowden/Data/MKE Factors Update_for Shion and Joe_corrected.csv")
# Removing first NA column so full dataset operations dont fail
mke_data_new$D_R <- NULL
chi_data_new$D_R <- NULL
#
# MILWAUKEE DATA
#
# shows correlation of variables in full MKE dataset
corrplot(cor(mke_data, use="complete.obs"), order="hclust", tl.col="black", tl.ce=.75)
# building new dataframes to include only socioeconomic variables along with pclag and vclag variables
#
mke_data.props <- mke_data_new[14:26]
mke_data.props <- mke_data.props[ -c(12) ]
mke_data_withCrime <- mke_data.props
mke_data_withCrime$Violent <- mke_data_new$Violent
mke_data_withCrime$Property <- mke_data_new$Property
mke_data_withCrime$vclag <- mke_data_new$vclag
mke_data_withCrime$pclag <- mke_data_new$pclag
mke_data_withCrime$EthnHerter <- mke_data_new$EthnHerter
# shows correlation of below 4 groups in a heatmap type plot
corrplot(cor(mke_data_withCrime, use="complete.obs"), order="hclust", tl.col="black", tl.ce=.75)
# finding number of factors
parallel_mke <- fa.parallel(mke_data.props, fm="minres", fa="fa")
# perform factor analysis
fourfactor_mke <- fa(mke_data.props, nfactors=4, rotate="varimax", fm="minres")
print(fourfactor_mke)
# show plot, dividing the dimensions into 4 factors
fa.diagram(fourfactor_mke)
# print loadings over 0.5
print(fourfactor_mke$loadings, cutoff=0.5)
#
# CHICAGO DATA
#
# correlation of variables in full CHI dataset
corrplot(cor(new_chi, use="complete.obs"), order="hclust", tl.col="black", tl.ce=.75)
# building new dataframes to include only socioeconomic variables along with pclag and vclag variables
#
chi_data.props <- chi_data_new[14:26]
chi_data.props <- chi_data.props[ -c(6) ]
chi_data_withCrime <- chi_data.props
chi_data_withCrime$Violent <- chi_data$Violent
chi_data_withCrime$Property <- chi_data$Property
chi_data_withCrime$vclag <- chi_data$vclag
chi_data_withCrime$pclag <- chi_data$pclag
chi_data_withCrime$EthnHerter <- chi_data$EthnHerter
# shows correlation of variables across the modified prop dataset
corrplot(cor(chi_data_withCrime, use="complete.obs"), order="hclust", tl.col="black", tl.ce=.75)
# finding number of factors
parallel_chi <- fa.parallel(chi_data.props, fm="minres", fa="fa")
# perform factor analysis
fourfactor_chi <- fa(chi_data.props, nfactors=4, rotate="varimax", fm="minres")
print(fourfactor_chi)
# show plot dividing the dimensions into 4 factors
fa.diagram(fourfactor_chi)
# print loadings over 0.5
print(fourfactor_chi$loadings, cutoff=0.5)
# print loadings over 0.5
print(fourfactor_mke$loadings, cutoff=0.5)
print(fourfactor_mke)
# print loadings over 0.5
print(fourfactor_mke$loadings, cutoff=0.5)
# print loadings over 0.5
print(fourfactor_chi$loadings, cutoff=0.5)
